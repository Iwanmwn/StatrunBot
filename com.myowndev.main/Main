package com.myowndev.main;

import org.json.JSONArray;
import org.json.JSONObject;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class Main {

    private String BASE_URL = "https://api.telegram.org/bot<Your Token There>/"; // You should take your token from @BotFather. Read more on telegram bots API
    private String POLLING_URL = BASE_URL + "getUpdates";
    private String SENDMESSAGE_URL = BASE_URL + "sendMessage";

    public static Connection conn;
    public static Statement statmt;
    public static ResultSet resSet;
    int lines = 0;
    int chars = 0;

    private  Main() {
        try {
            conn();
            run();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (UnirestException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private  HttpResponse<JsonNode> sendMessage(Integer chatId, String text) throws UnirestException {
        return Unirest
                .post(SENDMESSAGE_URL)
                .field("chat_id", chatId)
                .field("text", text).asJson();
    }
    private  HttpResponse<JsonNode> getUpdates(Integer offset) throws UnirestException {
        return Unirest
                .post(POLLING_URL)
                .field("offset", offset)
                .asJson();
    }
    public static void conn() throws ClassNotFoundException, SQLException {
        conn = null;
        Class.forName("org.sqlite.JDBC");
        conn = DriverManager.getConnection("jdbc:sqlite:res/db.s3db");
    }
    private void run() throws Exception {
        int last_update_id = 0;
        HttpResponse<JsonNode> response;
        statmt = conn.createStatement();
        statmt.execute("CREATE TABLE if not exists 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'chat_id' INT, 'user_id' INT, 'lines' INT, 'chars' INT);");
        statmt.execute("insert into 'users' ('chat_id', 'user_id', 'lines', 'chars') values ('" + (-1) + "', '" + 2 + "', '" + 3 + "',  '" + 4 + "');"); // kostyl
        while (true) {
            response = getUpdates(last_update_id++);
            if (response.getStatus() == 200) {
                JSONArray responses = response
                        .getBody()
                        .getObject()
                        .getJSONArray("result");
                if (responses.isNull(0)) {
                    continue;
                } else {
                    last_update_id = responses
                            .getJSONObject(responses.length() - 1)
                            .getInt("update_id") + 1;
                }
                for (int i = 0; i < responses.length(); i++) {
                    JSONObject message = responses
                            .getJSONObject(i)
                            .getJSONObject("message");
                    int chat_id = message
                            .getJSONObject("chat")
                            .getInt("id");
                    int user_id = message
                            .getJSONObject("from")
                            .getInt("id");
                    if (message.has("text") && chat_id < 0) {
                        String text = message.getString("text");
                        System.out.print(text + " | ");
                        resSet = statmt.executeQuery("SELECT chat_id, user_id, lines, chars FROM users where chat_id = "
                                + chat_id + " and user_id = " + user_id + ";");
                        if (resSet.next()) {
                            lines = resSet.getInt("lines");
                            chars = resSet.getInt("chars");
                            statmt.execute("UPDATE users set lines = "
                                    + (lines = lines + 1) + ", chars = " + (chars + text.length()) +
                                    " where chat_id = " + chat_id + " and user_id = " + user_id + ";");
                            System.out.println("updated existed " + chat_id + " " + user_id);
                        } else {
                            statmt.execute("INSERT into 'users' ('chat_id', 'user_id', 'lines', 'chars') values ('"
                                    + (chat_id) + "', '" + user_id + "', '" + 1 + "',  '"
                                    + text.length() + "');");
                            System.out.println("created new " + chat_id + " " + user_id);
                        }
                        if (text.startsWith("/mystats")) {
                            sendMessage(chat_id, "Your statistics:\n" +
                                    "Lines|Chars|Eff\n" +
                                    lines + "|" + chars + "|" + chars / lines);
                        }
                    }
                }
            }
        }
    }
    public static void main(String args[]) {
        new Main();
    }
}
